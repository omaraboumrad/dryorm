title = "DryORM Features"
order = 5

[[chapters]]
title = "Basic Model"
content = """from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

def run():
    instance = Person.objects.create(name='John Doe')
    print(f'Created: {instance}')"""

[[chapters]]
title = "Bulk Create"
content = """from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=100)

def run():
    Person.objects.bulk_create([
        Person(name='John Doe'),
        Person(name='Jane Doe'),
        Person(name='Jim Doe'),
    ])
"""


[[chapters]]
title = "Faker - Test Data"
content = """from django.db import models
from tabulate import tabulate
from faker import Faker

class Person(models.Model):
    class Role(models.TextChoices):
        ADMIN = 'admin'
        USER = 'user'
        GUEST = 'guest'

    name = models.CharField(max_length=100)
    role = models.CharField(max_length=100, choices=Role.choices)

def run():
    fake = Faker()

    Person.objects.bulk_create([
        Person(name=fake.name(), role=fake.random_element(Person.Role.choices))
        for _ in range(100)
    ])

    print(tabulate(
        Person.objects.all().values('role').annotate(models.Count('id')),
        headers='keys',
        tablefmt='psql'
    ))"""

[[chapters]]
title = "CSV Import"
content = """import csv
from io import StringIO

from django.db import models
from tabulate import tabulate

class Person(models.Model):
    name = models.CharField(max_length=100)
    country = models.CharField(max_length=100)

data = \"\"\"name,country
John Doe,USA
Jane Doe,Canada
Jim Doe,UK
\"\"\"

def run():
    reader = csv.DictReader(StringIO(data))
    Person.objects.bulk_create([
        Person(**row) for row in reader
    ])

    print(tabulate(
        Person.objects.values(),
        headers='keys',
        tablefmt='psql'
    ))"""

[[chapters]]
title = "Tabular Output"
content = """from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=100)

def run():
    Person.objects.bulk_create([
        Person(name='John Doe'),
        Person(name='John Smith'),
        Person(name='Jane Doe'),
        Person(name='Jane Smith'),
    ])

    return {
        'The Does': list(Person.objects.filter(name__endswith='Doe').values()),
        'The Smiths': list(Person.objects.filter(name__endswith='Smith').values()),
    }"""

[[chapters]]
title = "Complete Showcase"
content = """from django.db import models

# Tabulate and Faker are available.
from tabulate import tabulate
from faker import Faker

# You can place the models here
class Person(models.Model):
    name = models.CharField(max_length=100)

# You need a run function
def run():
    # At this point all migrations are created and applied
    john = Person.objects.create(name='John Doe')
    jane = Person.objects.create(name='Jane Doe')

    # Any "print" statements will be displayed in "Output"
    print(f'Hello, {john.name}!')

    # If you return a Dict[str, List[Dict[str, Any]]], it will be displayed
    # as a Table below the Output Section and will be given the key as title.
    return {
        'People': list(Person.objects.values()),
        'Other': [
            {'name': 'Cell 1', 'other': 'Cell 2'},
            {'name': 'Cell 3', 'other': 'Cell 4'},
        ]
    }

    # Alternatively, you can just return a list of dicts
    # to render a default "Data" table.
    # return list(Person.objects.all().values())"""

[[chapters]]
title = "Template Rendering"
content = """
from django.template import Context
from django.template import Template
from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=100)

def run():
    people = Person.objects.bulk_create([
        Person(name='John'),
        Person(name='Jane')
    ])

    return Template(\"\"\"
    <ul>
        {% for person in people %}
        <li>{{ person.name }}</li>
        {% endfor %}
    </ul>
    \"\"\").render(Context({
        'people': people
    }))
"""


[[chapters]]
title = "URL Routing"
content = """
from django.db import models
from django.test import Client
from django.urls import path
from django.http import JsonResponse
from faker import Faker

class Person(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()

def person_list(request):
    return JsonResponse({"people": list(Person.objects.values())})

urlpatterns = [
    path("person/", person_list),
]

def run():
    fake = Faker()

    Person.objects.bulk_create([
        Person(
            name=fake.name(),
            email=fake.email(),
        )
        for _ in range(10)
    ])

    client = Client()
    return client.get("/person/").json()
"""
