title = "Relationships"
order = 2

[[chapters]]
title = "Foreign Keys"
content = """from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)

class Post(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

def run():
    author = Author.objects.create(name='Tech Writer')

    # Create posts
    Post.objects.bulk_create([
        Post(title='Django Basics', content='Learn Django fundamentals', author=author),
        Post(title='Python Tips', content='Useful Python tricks', author=author),
    ])

    # Can also create posts from reverse relationship
    author.post_set.create(
        title='Advanced Django',
        content='Deep dive into Django features'
    )

    # Access related objects
    print(f'Posts by {author.name}:')
    for post in author.post_set.all():
        print(f'- {post.title}')

    # Reverse foreign key lookup
    post = Post.objects.first()
    print(f'Post "{post.title}" by {post.author.name}')
"""

[[chapters]]
title = "One To One"
content = """from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)

class AuthorProfile(models.Model):
    author = models.OneToOneField(Author, on_delete=models.CASCADE, related_name='profile')
    bio = models.TextField()
    website = models.URLField(blank=True)

class Post(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

def run():
    # Create author and profile
    author = Author.objects.create(name='Jane Developer')
    profile = AuthorProfile.objects.create(
        author=author,
        bio='Full-stack developer with 5 years experience',
        website='https://janedev.com',
    )

    # Create a post
    Post.objects.create(
        author=author,
        title='My Development Journey',
        content='How I became a developer'
    )

    # Access one-to-one relationships
    print('Author:', author.name)
    print('Bio:', author.profile.bio)
    print('Website:', author.profile.website)

    # Access from profile to author
    print(f'Profile belongs to:', profile.author.name)
    print(f'Author has {author.post_set.count()} post(s)')
"""

[[chapters]]
title = "Many To Many"
content = """from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)

class Tag(models.Model):
    name = models.CharField(max_length=50, unique=True)

class Post(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    author = models.ForeignKey(Author, on_delete=models.CASCADE)
    tags = models.ManyToManyField(Tag, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

def run():
    author = Author.objects.create(name='Tech Blogger')

    # Create tags
    django_tag = Tag.objects.create(name='django')
    python_tag = Tag.objects.create(name='python')
    web_tag = Tag.objects.create(name='web-development')

    # Create post and assign tags
    post1 = Post.objects.create(
        author=author,
        title='Django ORM Guide',
        content='Comprehensive guide',
    )
    post1.tags.add(django_tag, python_tag, web_tag)

    post2 = Post.objects.create(
        author=author,
        title='Python Best Practices',
        content='Clean code tips'
    )
    post2.tags.add(python_tag)

    # Query many-to-many relationships
    print(f'Tags for "{post1.title}":')
    for tag in post1.tags.all():
        print(f'- {tag.name}')

    print(f'Posts tagged with "python":')
    for post in python_tag.post_set.all():
        print(f'- {post.title}')

    # Filter by many-to-many fields
    django_posts = Post.objects.filter(tags__name='django')
    print(f'Posts with Django tag:')
    for post in django_posts:
        print(f'- {post.title}')
"""
