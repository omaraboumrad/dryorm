title = "Fundamentals"
order = 1

[[chapters]]
title = "Defining models"
content = """from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)

def run():
    # Single object creation
    author = Author.objects.create(name='Jane Doe')
    print('Created', author.name)

    # Bulk creation - more efficient for multiple objects
    authors = Author.objects.bulk_create([
        Author(name='Alice Johnson'),
        Author(name='Bob Smith'),
        Author(name='Charlie Brown'),
    ])
    print('Bulk created:', len(authors), 'authors')
"""

[[chapters]]
title = "Simple model operations"
content = """from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    bio = models.TextField(blank=True, null=True)
    birth_date = models.DateTimeField()

    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

def run():
    # Create
    author = Author.objects.create(
        name='John Smith',
        email='john@example.com',
        bio='Experienced technical writer',
        birth_date='1985-05-15'
    )

    # Read
    found_author = Author.objects.get(email='john@example.com')
    print('Found:', found_author)

    # Update
    found_author.bio = 'Updated bio content'
    found_author.save()
    print(f'Updated bio: {found_author.bio}')

    # Delete
    found_author.delete()
    print('Author deleted')
    print('Total:', Author.objects.count())
"""


[[chapters]]
title = "Filtering data"
content = """from django.db import models
from datetime import timedelta
from django.utils import timezone

class Author(models.Model):
    name = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

def run():
    Author.objects.bulk_create([
        Author(name='John Doe'),
        Author(name='Jane Smith', is_active=False),
        Author(name='Barry White'),
        Author(name='John Wilson')
    ])

    # Basic filtering
    active_authors = Author.objects.filter(is_active=True)
    print('Active:', active_authors)

    john_authors = Author.objects.filter(name__icontains='john')
    print('Johns:', john_authors)

    # Multiple conditions
    recent_active = Author.objects.filter(
        is_active=True,
        created_at__gte=timezone.now() - timedelta(days=1)
    )
    print(f'Recent active:', recent_active.count())
"""

[[chapters]]
title = "Ordering and limiting Results"
content = """from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    article_count = models.IntegerField(default=0)

def run():
    # Create test data
    Author.objects.bulk_create([
        Author(name='Alice', article_count=5),
        Author(name='Bob', article_count=12),
        Author(name='Bobby', article_count=3),
        Author(name='Diana', article_count=8),
    ])

    print('Top authors by article count:')
    top_authors = Author.objects.order_by('-article_count')
    for author in top_authors:
        print(f'- {author.name}: {author.article_count} articles')

    print('Authors ordered by name, then by article count:')
    authors_by_name_then_count = Author.objects.order_by('name', '-article_count')
    for author in authors_by_name_then_count:
        print(f'- {author.name}: {author.article_count} articles')

    print('Top 2 authors by article count:')
    top_2_authors = Author.objects.order_by('-article_count')[:2]
    for author in top_2_authors:
        print(f'- {author.name}: {author.article_count} articles')
"""

[[chapters]]
title = "Querying with Q"
content = """from django.db import models
from django.db.models import Q

class Author(models.Model):
    name = models.CharField(max_length=100)
    article_count = models.IntegerField(default=0)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

def run():
    Author.objects.bulk_create([
        Author(name='Active Writer', article_count=10, is_active=True),
        Author(name='Inactive Expert', article_count=50, is_active=False),
        Author(name='New Active Author', article_count=22, is_active=False),
        Author(name='New Author', article_count=2, is_active=False),
    ])

    print('Active or prolific authors (active=True OR articles>=20):')

    prolific_or_active = Author.objects.filter(
        Q(is_active=True) | Q(article_count__gte=20)
    )
    for author in prolific_or_active:
        print(f'- {author.name}: {author.article_count} articles, active={author.is_active}')

    print('Authors with 5+ articles (excluding "new" in name):')

    specific_authors = Author.objects.filter(
        Q(article_count__gte=5) & ~Q(name__icontains='new')
    )
    for author in specific_authors:
        print(f'- {author.name}: {author.article_count} articles')

    print('Complex query (active AND (10+ articles OR "expert" in name)):')

    complex_query = Author.objects.filter(
        Q(is_active=True) & (
            Q(article_count__gte=10) | Q(name__icontains='expert')
        )
    )
    for author in complex_query:
        print(f'- {author.name}')"""
