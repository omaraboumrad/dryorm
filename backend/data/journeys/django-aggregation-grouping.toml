title = "Aggregation & Grouping"

[[chapters]]
title = "Basic aggregations"
content = """
from django.db import models
from django.db.models import Count, Sum, Avg, Min, Max
from decimal import Decimal

class Store(models.Model):
    name = models.CharField(max_length=100)
    location = models.CharField(max_length=100)
    
    def __str__(self):
        return self.name

class Product(models.Model):
    name = models.CharField(max_length=100)
    category = models.CharField(max_length=50)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    
    def __str__(self):
        return self.name

class Sale(models.Model):
    store = models.ForeignKey(Store, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField()
    sale_date = models.DateField()
    
    def __str__(self):
        return f"{self.product.name} at {self.store.name}"

def run():
    # Create stores
    store1 = Store.objects.create(name='Downtown Store', location='Downtown')
    store2 = Store.objects.create(name='Mall Store', location='Shopping Mall')
    
    # Create products
    laptop = Product.objects.create(name='Laptop', category='Electronics', price=Decimal('999.99'))
    mouse = Product.objects.create(name='Mouse', category='Electronics', price=Decimal('29.99'))
    book = Product.objects.create(name='Python Book', category='Books', price=Decimal('39.99'))
    
    # Create sales
    Sale.objects.create(store=store1, product=laptop, quantity=5, sale_date='2024-01-15')
    Sale.objects.create(store=store1, product=mouse, quantity=10, sale_date='2024-01-16')
    Sale.objects.create(store=store2, product=laptop, quantity=3, sale_date='2024-01-17')
    Sale.objects.create(store=store2, product=book, quantity=8, sale_date='2024-01-18')
    Sale.objects.create(store=store1, product=book, quantity=12, sale_date='2024-01-19')
    
    print('=== BASIC AGGREGATIONS ===')
    
    # Count total sales
    total_sales = Sale.objects.count()
    print(f'Total sales records: {total_sales}')
    
    # Sum of quantities
    total_quantity = Sale.objects.aggregate(total=Sum('quantity'))
    print(f'Total items sold: {total_quantity["total"]}')
    
    # Average quantity per sale
    avg_quantity = Sale.objects.aggregate(avg=Avg('quantity'))
    print(f'Average quantity per sale: {avg_quantity["avg"]:.2f}')
    
    # Min and max quantities
    quantity_range = Sale.objects.aggregate(
        min_qty=Min('quantity'),
        max_qty=Max('quantity')
    )
    print(f'Quantity range: {quantity_range["min_qty"]} - {quantity_range["max_qty"]}')
    
    print('\\n=== AGGREGATING RELATED FIELDS ===')
    
    # Total revenue (quantity * price)
    from django.db.models import F
    total_revenue = Sale.objects.aggregate(
        revenue=Sum(F('quantity') * F('product__price'))
    )
    print(f'Total revenue: ${total_revenue["revenue"]}')
    
    # Average product price
    avg_price = Sale.objects.aggregate(
        avg_price=Avg('product__price')
    )
    print(f'Average product price in sales: ${avg_price["avg_price"]:.2f}')
    
    # Count distinct products sold
    distinct_products = Sale.objects.aggregate(
        distinct_products=Count('product', distinct=True)
    )
    print(f'Distinct products sold: {distinct_products["distinct_products"]}')
    
    print('\\n=== CONDITIONAL AGGREGATIONS ===')
    
    # Electronics sales only
    electronics_stats = Sale.objects.filter(
        product__category='Electronics'
    ).aggregate(
        count=Count('id'),
        total_qty=Sum('quantity'),
        revenue=Sum(F('quantity') * F('product__price'))
    )
    print(f'Electronics: {electronics_stats["count"]} sales, '
          f'{electronics_stats["total_qty"]} items, ${electronics_stats["revenue"]} revenue')
    
    # Store 1 performance
    store1_stats = Sale.objects.filter(
        store=store1
    ).aggregate(
        sales_count=Count('id'),
        total_items=Sum('quantity'),
        avg_sale_size=Avg('quantity')
    )
    print(f'Downtown Store: {store1_stats["sales_count"]} sales, '
          f'{store1_stats["total_items"]} items, avg {store1_stats["avg_sale_size"]:.1f} per sale')
"""

[[chapters]]
title = "Annotations and group by"
content = """
from django.db import models
from django.db.models import Count, Sum, Avg, F, Q, Case, When, Value
from decimal import Decimal

class Department(models.Model):
    name = models.CharField(max_length=100)
    budget = models.DecimalField(max_digits=10, decimal_places=2)
    
    def __str__(self):
        return self.name

class Employee(models.Model):
    name = models.CharField(max_length=100)
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    salary = models.DecimalField(max_digits=8, decimal_places=2)
    hire_date = models.DateField()
    
    def __str__(self):
        return self.name

class Project(models.Model):
    name = models.CharField(max_length=100)
    department = models.ForeignKey(Department, on_delete=models.CASCADE)
    budget = models.DecimalField(max_digits=10, decimal_places=2)
    start_date = models.DateField()
    is_completed = models.BooleanField(default=False)
    
    def __str__(self):
        return self.name

def run():
    # Create departments
    engineering = Department.objects.create(name='Engineering', budget=Decimal('500000'))
    marketing = Department.objects.create(name='Marketing', budget=Decimal('200000'))
    sales = Department.objects.create(name='Sales', budget=Decimal('300000'))
    
    # Create employees
    Employee.objects.create(name='Alice Johnson', department=engineering, 
                           salary=Decimal('95000'), hire_date='2020-01-15')
    Employee.objects.create(name='Bob Smith', department=engineering, 
                           salary=Decimal('88000'), hire_date='2021-03-10')
    Employee.objects.create(name='Carol Davis', department=marketing, 
                           salary=Decimal('75000'), hire_date='2019-06-01')
    Employee.objects.create(name='David Wilson', department=sales, 
                           salary=Decimal('82000'), hire_date='2020-11-20')
    Employee.objects.create(name='Eva Brown', department=sales, 
                           salary=Decimal('79000'), hire_date='2021-08-15')
    
    # Create projects
    Project.objects.create(name='Web Platform', department=engineering, 
                          budget=Decimal('150000'), start_date='2024-01-01', is_completed=False)
    Project.objects.create(name='Mobile App', department=engineering, 
                          budget=Decimal('120000'), start_date='2024-02-01'), is_completed=True)
    Project.objects.create(name='Brand Campaign', department=marketing, 
                          budget=Decimal('80000'), start_date='2024-01-15'), is_completed=True)
    Project.objects.create(name='Sales Training', department=sales, 
                          budget=Decimal('25000'), start_date='2024-03-01'), is_completed=False)
    
    print('=== DEPARTMENT STATISTICS ===')
    
    # Annotate departments with employee and project counts
    dept_stats = Department.objects.annotate(
        employee_count=Count('employee'),
        project_count=Count('project'),
        total_salary_cost=Sum('employee__salary'),
        avg_employee_salary=Avg('employee__salary'),
        total_project_budget=Sum('project__budget'),
        completed_projects=Count('project', filter=Q(project__is_completed=True))
    )
    
    for dept in dept_stats:
        print(f'\\n{dept.name} Department:')
        print(f'  Budget: ${dept.budget}')
        print(f'  Employees: {dept.employee_count}')
        print(f'  Total salary cost: ${dept.total_salary_cost or 0}')
        print(f'  Avg employee salary: ${dept.avg_employee_salary or 0:.2f}')
        print(f'  Projects: {dept.project_count} ({dept.completed_projects} completed)')
        print(f'  Total project budget: ${dept.total_project_budget or 0}')
    
    print('\\n=== EMPLOYEE ANNOTATIONS ===')
    
    # Annotate employees with department info and calculations
    employees_annotated = Employee.objects.annotate(
        dept_employee_count=Count('department__employee'),
        salary_rank_in_dept=F('salary'),  # We'll use this for comparison
        is_high_earner=Case(
            When(salary__gte=85000, then=Value('High')),
            When(salary__gte=75000, then=Value('Medium')),
            default=Value('Standard'),
            output_field=models.CharField()
        ),
        years_employed=2024 - models.Extract('hire_date', 'year')
    ).select_related('department')
    
    print('Employee Analysis:')
    for emp in employees_annotated:
        print(f'  {emp.name} ({emp.department.name}): ${emp.salary} - '
              f'{emp.is_high_earner} earner, {emp.years_employed} years')
    
    print('\\n=== GROUPING BY SALARY RANGES ===')
    
    # Group employees by salary ranges
    salary_distribution = Employee.objects.aggregate(
        high_earners=Count('id', filter=Q(salary__gte=85000)),
        medium_earners=Count('id', filter=Q(salary__range=(75000, 84999))),
        standard_earners=Count('id', filter=Q(salary__lt=75000)),
        total_payroll=Sum('salary'),
        avg_salary=Avg('salary')
    )
    
    print('Salary Distribution:')
    print(f'  High earners (â‰¥$85K): {salary_distribution["high_earners"]}')
    print(f'  Medium earners ($75K-$84K): {salary_distribution["medium_earners"]}')
    print(f'  Standard earners (<$75K): {salary_distribution["standard_earners"]}')
    print(f'  Total payroll: ${salary_distribution["total_payroll"]}')
    print(f'  Average salary: ${salary_distribution["avg_salary"]:.2f}')
    
    print('\\n=== PROJECT PERFORMANCE BY DEPARTMENT ===')
    
    # Department project performance
    dept_projects = Department.objects.annotate(
        active_projects=Count('project', filter=Q(project__is_completed=False)),
        completed_projects=Count('project', filter=Q(project__is_completed=True)),
        total_project_budget=Sum('project__budget'),
        avg_project_budget=Avg('project__budget'),
        project_completion_rate=Case(
            When(project__isnull=True, then=Value(0)),
            default=Count('project', filter=Q(project__is_completed=True)) * 100.0 / Count('project'),
            output_field=models.FloatField()
        )
    )
    
    print('Department Project Performance:')
    for dept in dept_projects:
        total_projects = (dept.active_projects or 0) + (dept.completed_projects or 0)
        if total_projects > 0:
            print(f'\\n{dept.name}:')
            print(f'  Total projects: {total_projects}')
            print(f'  Active: {dept.active_projects}, Completed: {dept.completed_projects}')
            print(f'  Completion rate: {dept.project_completion_rate:.1f}%')
            print(f'  Total budget: ${dept.total_project_budget}')
            print(f'  Avg project budget: ${dept.avg_project_budget:.2f}')
"""

[[chapters]]
title = "Advanced aggregation patterns"
content = """
from django.db import models
from django.db.models import Count, Sum, Avg, F, Q, Case, When, Value, Subquery, OuterRef
from django.db.models.functions import Coalesce, Extract, TruncMonth
from decimal import Decimal
from datetime import date

class Customer(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField()
    registration_date = models.DateField()
    is_premium = models.BooleanField(default=False)
    
    def __str__(self):
        return self.name

class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)
    order_date = models.DateField()
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=[
        ('pending', 'Pending'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled')
    ])
    
    def __str__(self):
        return f"Order {self.id} - {self.customer.name}"

class Product(models.Model):
    name = models.CharField(max_length=100)
    category = models.CharField(max_length=50)
    price = models.DecimalField(max_digits=8, decimal_places=2)
    
    def __str__(self):
        return self.name

class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    quantity = models.IntegerField()
    unit_price = models.DecimalField(max_digits=8, decimal_places=2)
    
    def __str__(self):
        return f"{self.quantity}x {self.product.name}"

def run():
    # Create customers
    alice = Customer.objects.create(name='Alice Johnson', email='alice@example.com',
                                  registration_date=date(2023, 1, 15), is_premium=True)
    bob = Customer.objects.create(name='Bob Smith', email='bob@example.com',
                                registration_date=date(2023, 6, 10), is_premium=False)
    carol = Customer.objects.create(name='Carol Davis', email='carol@example.com',
                                  registration_date=date(2024, 1, 5), is_premium=True)
    
    # Create products
    laptop = Product.objects.create(name='Gaming Laptop', category='Electronics', price=Decimal('1299.99'))
    mouse = Product.objects.create(name='Wireless Mouse', category='Electronics', price=Decimal('59.99'))
    book = Product.objects.create(name='Django Guide', category='Books', price=Decimal('39.99'))
    headphones = Product.objects.create(name='Noise-Canceling Headphones', category='Electronics', price=Decimal('199.99'))
    
    # Create orders
    order1 = Order.objects.create(customer=alice, order_date=date(2024, 1, 10),
                                 total_amount=Decimal('1359.98'), status='completed')
    OrderItem.objects.create(order=order1, product=laptop, quantity=1, unit_price=laptop.price)
    OrderItem.objects.create(order=order1, product=mouse, quantity=1, unit_price=mouse.price)
    
    order2 = Order.objects.create(customer=bob, order_date=date(2024, 1, 15),
                                 total_amount=Decimal('99.98'), status='completed')
    OrderItem.objects.create(order=order2, product=mouse, quantity=1, unit_price=mouse.price)
    OrderItem.objects.create(order=order2, product=book, quantity=1, unit_price=book.price)
    
    order3 = Order.objects.create(customer=carol, order_date=date(2024, 2, 1),
                                 total_amount=Decimal('259.98'), status='pending')
    OrderItem.objects.create(order=order3, product=headphones, quantity=1, unit_price=headphones.price)
    OrderItem.objects.create(order=order3, product=mouse, quantity=1, unit_price=mouse.price)
    
    order4 = Order.objects.create(customer=alice, order_date=date(2024, 2, 10),
                                 total_amount=Decimal('39.99'), status='completed')
    OrderItem.objects.create(order=order4, product=book, quantity=1, unit_price=book.price)
    
    print('=== CUSTOMER LIFETIME VALUE ANALYSIS ===')
    
    # Complex customer analysis with multiple aggregations
    customer_analysis = Customer.objects.annotate(
        total_orders=Count('order'),
        completed_orders=Count('order', filter=Q(order__status='completed')),
        pending_orders=Count('order', filter=Q(order__status='pending')),
        total_spent=Coalesce(
            Sum('order__total_amount', filter=Q(order__status='completed')), 
            Decimal('0')
        ),
        avg_order_value=Coalesce(
            Avg('order__total_amount', filter=Q(order__status='completed')),
            Decimal('0')
        ),
        largest_order=Coalesce(
            models.Max('order__total_amount', filter=Q(order__status='completed')),
            Decimal('0')
        ),
        registration_year=Extract('registration_date', 'year'),
        customer_segment=Case(
            When(Q(is_premium=True) & Q(order__total_amount__sum__gte=500), 
                 then=Value('VIP')),
            When(is_premium=True, then=Value('Premium')),
            When(order__total_amount__sum__gte=200, then=Value('Regular')),
            default=Value('Basic'),
            output_field=models.CharField()
        )
    )
    
    print('Customer Lifetime Value Analysis:')
    for customer in customer_analysis:
        print(f'\\n{customer.name} ({customer.customer_segment}):')
        print(f'  Premium: {customer.is_premium}')
        print(f'  Registered: {customer.registration_date} ({customer.registration_year})')
        print(f'  Orders: {customer.total_orders} total, {customer.completed_orders} completed')
        print(f'  Total spent: ${customer.total_spent}')
        print(f'  Average order: ${customer.avg_order_value:.2f}')
        print(f'  Largest order: ${customer.largest_order}')
    
    print('\\n=== PRODUCT PERFORMANCE ANALYSIS ===')
    
    # Product analysis with order item aggregations
    product_performance = Product.objects.annotate(
        times_ordered=Count('orderitem'),
        total_quantity_sold=Coalesce(Sum('orderitem__quantity'), 0),
        total_revenue=Coalesce(
            Sum(F('orderitem__quantity') * F('orderitem__unit_price')),
            Decimal('0')
        ),
        avg_quantity_per_order=Coalesce(Avg('orderitem__quantity'), 0),
        unique_customers=Count('orderitem__order__customer', distinct=True),
        performance_rating=Case(
            When(orderitem__quantity__sum__gte=3, then=Value('Top Seller')),
            When(orderitem__quantity__sum__gte=2, then=Value('Good')),
            When(orderitem__quantity__sum__gte=1, then=Value('Average')),
            default=Value('No Sales'),
            output_field=models.CharField()
        )
    )
    
    print('Product Performance:')
    for product in product_performance.order_by('-total_revenue'):
        if product.times_ordered > 0:
            print(f'\\n{product.name} ({product.category}) - {product.performance_rating}:')
            print(f'  Price: ${product.price}')
            print(f'  Times ordered: {product.times_ordered}')
            print(f'  Total sold: {product.total_quantity_sold} units')
            print(f'  Revenue: ${product.total_revenue}')
            print(f'  Avg per order: {product.avg_quantity_per_order:.1f}')
            print(f'  Unique customers: {product.unique_customers}')
    
    print('\\n=== MONTHLY ORDER TRENDS ===')
    
    # Monthly aggregations using TruncMonth
    monthly_trends = Order.objects.filter(
        status='completed'
    ).annotate(
        month=TruncMonth('order_date')
    ).values('month').annotate(
        order_count=Count('id'),
        total_revenue=Sum('total_amount'),
        avg_order_value=Avg('total_amount'),
        unique_customers=Count('customer', distinct=True)
    ).order_by('month')
    
    print('Monthly Trends (Completed Orders):')
    for trend in monthly_trends:
        month_str = trend['month'].strftime('%Y-%m')
        print(f'  {month_str}: {trend["order_count"]} orders, '
              f'${trend["total_revenue"]} revenue, '
              f'${trend["avg_order_value"]:.2f} avg, '
              f'{trend["unique_customers"]} customers')
    
    print('\\n=== ADVANCED SUBQUERY AGGREGATIONS ===')
    
    # Find customers with above-average spending using subquery
    avg_customer_spending = Customer.objects.aggregate(
        avg=Avg('order__total_amount', filter=Q(order__status='completed'))
    )['avg'] or Decimal('0')
    
    high_value_customers = Customer.objects.annotate(
        total_spent=Coalesce(
            Sum('order__total_amount', filter=Q(order__status='completed')),
            Decimal('0')
        )
    ).filter(
        total_spent__gt=avg_customer_spending
    )
    
    print(f'Average customer spending: ${avg_customer_spending:.2f}')
    print('Above-average customers:')
    for customer in high_value_customers:
        print(f'  {customer.name}: ${customer.total_spent} '
              f'({((customer.total_spent / avg_customer_spending - 1) * 100):.1f}% above avg)')
    
    # Category performance with conditional aggregations
    print('\\n=== CATEGORY PERFORMANCE ===')
    category_stats = Product.objects.values('category').annotate(
        product_count=Count('id'),
        products_sold=Count('orderitem', distinct=True),
        total_revenue=Coalesce(
            Sum(F('orderitem__quantity') * F('orderitem__unit_price')),
            Decimal('0')
        ),
        avg_product_price=Avg('price'),
        bestseller_price=models.Max('price', filter=Q(orderitem__quantity__sum__gte=2))
    ).order_by('-total_revenue')
    
    print('Category Performance:')
    for category in category_stats:
        print(f'\\n{category["category"]}:')
        print(f'  Products: {category["product_count"]} total, {category["products_sold"]} sold')
        print(f'  Revenue: ${category["total_revenue"]}')
        print(f'  Avg price: ${category["avg_product_price"]:.2f}')
        if category["bestseller_price"]:
            print(f'  Bestseller price: ${category["bestseller_price"]}')
"""
